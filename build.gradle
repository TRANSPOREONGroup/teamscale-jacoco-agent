buildscript {
	repositories {
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
		jcenter()
	}
	dependencies {
		classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
		classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.20'
	}
}

ext {
	appVersion = '11.2.0' // Also update version in BuildVersion.kt
	pluginVersion = '0.3.6' // Also update version in BuildVersion.kt
	reportGeneratorVersion = '1.2.4'
	teamscaleClientVersion = '0.2.5'

	// When upgrading JaCoCo to a newer version make sure to 
	// check the comment in the AnalyzerCache.java and CachingInstructionsBuilder.java.
	jacocoVersion = '0.8.3'
	log4jVersion = '2.8.2'

	// Needed to deploy the artifacts to our public share
	// Your public RSA key needs to be stored on the share to be able to deploy (Ask Timo)
	cqseMavenRepositoryPrivateKey = System.getProperty("user.home") + '/.ssh/id_rsa'
	cqseMavenRepositoryHost = 'ext1.cqse.eu'
	cqseMavenRepositoryPort = 2222
	cqseMavenRepositoryMavenPath = '/var/www/share/exchange/public/maven'
	cqseMavenRepositoryUrl = "scp://$cqseMavenRepositoryHost:$cqseMavenRepositoryPort$cqseMavenRepositoryMavenPath"
	cqseMavenRepositoryUser = 'www-data'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.hidetake.ssh'
	apply plugin: 'kotlin'

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	tasks.withType(JavaCompile) {
		sourceCompatibility = '1.7'
		targetCompatibility = '1.7'
	}

	group 'com.teamscale'

	tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
		kotlinOptions {
			// We can only specify 1.6 or 1.8 here
			// We specify 1.6 as out target 1.7 is technically equal to 1.6
			jvmTarget = '1.6'
		}
	}

	configurations {
		deployerJars
	}

	repositories {
		ivy {
			url 'https://share.cqse.eu/svn/artifacts/ivy'
		}
		jcenter()
		mavenCentral()
	}

	dependencies {
		compile 'org.jetbrains.kotlin:kotlin-stdlib'
		deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
	}

	remotes {
		share {
			host = cqseMavenRepositoryHost
			port = cqseMavenRepositoryPort
			user = cqseMavenRepositoryUser
			identity = file(cqseMavenRepositoryPrivateKey)
		}
	}

	tasks.withType(Upload) {
		doFirst {
			if (name.startsWith('install')) {
				return
			}
			ssh.run {
				session(remotes.share) {
					// Gradle gets stuck when we do not delete these metadata files before publishing the new version
					def name = project.name == 'agent' ? 'teamscale-jacoco-agent' : project.name
					remove cqseMavenRepositoryMavenPath + '/com/teamscale/' + name + '/maven-metadata.xml'
					remove cqseMavenRepositoryMavenPath + '/com/teamscale/' + name + '/maven-metadata.xml.md5'
					remove cqseMavenRepositoryMavenPath + '/com/teamscale/' + name + '/maven-metadata.xml.sha1'
				}
			}
		}
	}

}

// Installs the plugin to your local maven repository
task installGradlePlugin(dependsOn: [
		':agent:install',
		':impacted-tests-executor:install',
		':report-generator:install',
		':teamscale-gradle-plugin:install',
		':teamscale-client:install'
])

// Installs the plugin to your local maven repository without the agent
task iGP(dependsOn: [
		':impacted-tests-executor:install',
		':report-generator:install',
		':teamscale-gradle-plugin:install',
		':teamscale-client:install'
])

// Deploys the plugin to the public share
task deployGradlePlugin(dependsOn: [
		':agent:uploadShadow',
		':impacted-tests-executor:uploadArchives',
		':report-generator:uploadShadow',
		':teamscale-gradle-plugin:uploadShadow',
		':teamscale-client:uploadArchives'
])

// Deploys the plugin to the public share without the agent
task dGP(dependsOn: [
		':impacted-tests-executor:uploadArchives',
		':report-generator:uploadShadow',
		':teamscale-gradle-plugin:uploadShadow',
		':teamscale-client:uploadArchives'
])